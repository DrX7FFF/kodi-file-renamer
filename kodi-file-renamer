#!/usr/bin/env python
#
# kodi-file-renamer - Rename files based on Kodi database.
# Copyright (C) 2015-2018  Steven Hiscocks
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
from __future__ import print_function
import sys
import os
import re
import sqlite3

__version__ = '5.2'
__license__ = 'GPLv3'


def rename(con, select, updates, fnameformat, excludepaths=None,
           simplifyfilenames=False, dryrun=False):
    for row in con.execute(select):
        # Only '/' and NUL invalid on ext filesystem
        # Assuming NUL character wouldn't be in title
        newfname = fnameformat.format(**row).replace('/', '_')
        # And then further simplify if requested.
        if simplifyfilenames:
            newfname = re.sub('[<>:"\\|?*\x01-\x1f]', '', newfname)
        if 'strFilename' in row.keys():
            fname = row['strFilename']
            newfname += os.path.splitext(fname)[1]
            basepath = os.path.normpath(row['strPath'])
            fullpath = os.path.join(basepath, fname)
            newfullpath = os.path.join(basepath, newfname)
        else:
            basepath, fname = os.path.split(os.path.normpath(row['strPath']))
            # Keep trailing slash
            fullpath = os.path.join(basepath, fname, '')
            newfullpath = os.path.join(basepath, newfname, '')

        if fname == newfname:
            # No need to rename
            continue
        if any(fullpath.startswith(excludepath)
               for excludepath in excludepaths):
            # Excluded
            continue
        if os.path.exists(newfullpath):
            print("New file exists: %s -> %s" % (
                fullpath, newfullpath), file=sys.stderr)
            continue

        # Check for dry run.
        if not dryrun:
            try:
                # Attempt rename
                os.rename(fullpath, newfullpath)
            except OSError:
                print("Error renaming: {} -> {}".format(fullpath, newfullpath),
                      file=sys.stderr)
                continue

            cur = con.cursor()
            try:
                if 'strFilename' in row.keys():  # File
                    # Update fname in files table
                    cur.execute(
                        "UPDATE files SET strFilename=? WHERE idFile=?",
                        (newfname, row['idFile']))
                    for update in updates:
                        # Update path in table
                        cur.execute(update, (newfullpath, row['id']))
                else:  # Dir
                    # Update path in path table
                    # Use os.path.join to add trailing slash
                    cur.execute(
                        "UPDATE path SET strPath=? WHERE idPath=?",
                        (os.path.join(newfullpath, ''), row['idPath']))
                    for update in updates:
                        # Update path for episodes in path table
                        cur.execute(update, (fullpath, newfullpath, row['id']))
                con.commit()
            except sqlite3.Error:
                con.rollback()
                try:
                    # Attempt to undo rename
                    os.rename(newfullpath, fullpath)
                except OSError:
                    raise RuntimeError(
                        "Database not updated and error undoing rename: "
                        "{} -> {}".format(fullpath, newfullpath))
                else:
                    print("Error updating database, undoing rename: {} -> {}"
                          .format(fullpath, newfullpath), file=sys.stderr)
                    continue
            finally:
                cur.close()
        # Only output rename when successful (or dryrun).
        print("%s -> %s" % (fullpath, newfullpath))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        prog="kodi-file-renamer",
        description="Rename files based on Kodi database. "
        "List of changed files output to stdout. Any errors will be "
        "printed to stderr but program should exit normally unless file "
        "renames and database are left in state of not matching any more; in "
        "this worse case the program will quit immediately with exit code 3.",
        epilog="Copyright (C) 2015-2017  Steven Hiscocks. "
        "This program comes with ABSOLUTELY NO WARRANTY. This program is "
        "distributed under the GNU Public License GPL v3.")
    parser.add_argument('-V', '--version', action='version',
                        version="%%(prog)s %s" % __version__)
    parser.add_argument(
        '-n', '--dry-run', dest='dryrun', action='store_true',
        help="Don't actually rename any files or update the database, "
        "just output files which would be renamed")
    parser.add_argument(
        '-e', '--exclude-path', dest='excludepaths', action='append',
        metavar="PATH", help="Path to exclude, as a prefix.")
    parser.add_argument(
        '-s', '--simplify-filenames', dest='simplifyfilenames',
        action='store_true',
        help="Simplify filenames suitable for Microsoft OS/filesystem.")
    parser.add_argument('MyVideoDb', help="Kodi MyVideosXX.db file")
    args = parser.parse_args()

    if not os.path.isfile(args.MyVideoDb):
        print("Db file doesn't exist", file=sys.stderr)
        sys.exit(1)
    elif not os.access(args.MyVideoDb, os.W_OK) and not args.dryrun:
        print("Db file doesn't have write access", file=sys.stderr)
        sys.exit(1)

    con = sqlite3.connect(args.MyVideoDb)
    con.row_factory = sqlite3.Row
    try:
        rename(  # Movies
            con,
            "SELECT idMovie AS id, c00 AS title, "
            "substr(premiered,1,4) AS year, idFile, strFilename, strPath "
            "FROM movie "
            "JOIN files USING (idFile) "
            "JOIN path USING (idPath)",
            ["UPDATE movie SET c22=? WHERE idMovie=?"],
            "{title} ({year})",
            args.excludepaths or [],
            args.simplifyfilenames,
            args.dryrun,
            )

        rename(  # TV Shows
            con,
            "SELECT idShow AS id, c00 AS title, idPath, strPath FROM tvshow "
            "JOIN tvshowlinkpath USING (idShow) "
            "JOIN path USING (idPath)",
            ["UPDATE path SET strPath = REPLACE(strPath, ?, ?) WHERE "
             "idPath IN (SELECT idPath FROM files JOIN episode USING "
             "(idFile) WHERE idShow = ?)",
             "UPDATE episode SET c18 = REPLACE(c18, ?, ?) WHERE idShow = ?"],
            "{title}",
            args.excludepaths or [],
            args.simplifyfilenames,
            args.dryrun,
            )

        rename(  # Episodes
            con,
            "SELECT idEpisode AS id, episode.c00 AS title, "
            "CAST(episode.c12 AS INTEGER) AS season, "
            "CAST(episode.c13 AS INTEGER) AS episode, "
            "tvshow.c00 AS show, idFile, strFilename, strPath FROM episode "
            "JOIN tvshow USING (idShow) "
            "JOIN files USING (idFile) "
            "JOIN path USING (idPath)",
            ["UPDATE episode SET c18=? WHERE idEpisode=?"],
            "{show} S{season:02d}E{episode:02d} - {title}",
            args.excludepaths or [],
            args.simplifyfilenames,
            args.dryrun,
            )

        rename(  # Music Videos
            con,
            "SELECT idMVideo AS id, c00 AS title, c10 AS artist, idFile, "
            "strFilename, strPath FROM musicvideo "
            "JOIN files USING (idFile) "
            "JOIN path USING (idPath)",
            ["UPDATE musicvideo SET c13=? WHERE idMVideo=?"],
            "{artist} - {title}",
            args.excludepaths or [],
            args.simplifyfilenames,
            args.dryrun,
            )
    except Exception as e:
        print(e, file=sys.stderr)
        sys.exit(3)
    finally:
        con.close()
